# scripts/run_full_demo.py
"""DÃ©mo end-to-end robuste de FoodOPS.

Ce script rÃ©alise une exÃ©cution complÃ¨te, pensÃ©e pour Ãªtre tolÃ©rante aux
modules manquants pendant une phase de refactor ou d'intÃ©gration:

- crÃ©e un `Restaurant` (type au choix),
- gÃ©nÃ¨re un menu via `rules.recipe_factory` si disponible, sinon construit un
  mini menu de secours,
- injecte un lot de produits finis pour vendre dÃ¨s le premier tour,
- ajoute un peu de staff si des helpers dÃ©diÃ©s existent sur `Restaurant`,
- lance `Game.play()` sur 2 tours,
- affiche un rÃ©sumÃ© simple de fin d'exÃ©cution.

Le script bascule automatiquement en no-op comptabilitÃ© si les fonctions clÃ©s
ne sont pas prÃ©sentes, et utilise un scÃ©nario local simple si nÃ©cessaire.

ExÃ©cution (depuis la racine du dÃ©pÃ´t):

```bash
python run_full_demo.py
```

Utilisation comme module (extrait)Â :

```python
from FoodOPS_V1.core.game import Game
from FoodOPS_V1.domain.restaurant import Restaurant
from FoodOPS_V1.domain.restaurant import RestaurantType

resto = Restaurant(
    name="DÃ©mo Bistro",
    type=RestaurantType.BISTRO,
)
resto.menu = build_menu_for_type(RestaurantType.BISTRO)
prime_finished_stock(resto, portions=50)
Game(restaurants=[resto]).play()
```
"""

# ---- Imports robustes -------------------------------------------------------
from FoodOPS_V1.core.game import Game
from FoodOPS_V1.domain.scenario import CATALOG_SCENARIOS
from FoodOPS_V1.domain.local import CATALOG_LOCALS
from FoodOPS_V1.domain.restaurant import Restaurant, RestaurantType
from FoodOPS_V1.domain.inventory import Inventory

# from FoodOPS_V1.domain.recipe import SimpleRecipe
from FoodOPS_V1.rules.recipe_factory import build_menu_for_type


def build_menu_for_type(resto_type):
    """Construit un menu adaptÃ© au type de restaurant.

    Tente d'abord d'utiliser `FoodOPS_V1.rules.recipe_factory.build_menu_for_type`.
    En cas d'indisponibilitÃ© (pendant une phase de travail), crÃ©e un mini-menu
    de 2 recettes gÃ©nÃ©riques pour garantir la jouabilitÃ© de la dÃ©mo.

    ParamÃ¨tres
    - resto_type: une valeur de `RestaurantType`.

    Retour
    - list: une liste d'objets recette (implÃ©mentations du domaine).

    Exemple
    >>> from FoodOPS_V1.domain.restaurant import RestaurantType
    >>> menu = build_menu_for_type(RestaurantType.BISTRO)
    >>> len(menu) >= 2
    True
    """
    return build_menu_for_type(resto_type)


# Injecte un lot de produits finis pour pouvoir vendre au tour 1
def prime_finished_stock(resto, portions: int = 40):
    """Injecte un lot de produits finis pour vendre dÃ¨s le tour 1.

    Cette Ã©tape Ã©vite d'avoir Ã  passer par un cycle de production complet avant
    de pouvoir tester la vente et la comptabilitÃ©.

    ParamÃ¨tres
    - resto: instance de `Restaurant` dont on prime l'inventaire.
    - portions: nombre de portions du premier plat du menu Ã  injecter.

    Retour
    - tuple: (recette_primÃ©e, prix_unitaire, portions_injectÃ©es)

    Exemple
    >>> # supposons un restaurant avec un menu dÃ©jÃ  dÃ©fini
    >>> recipe, price, qty = prime_finished_stock(resto, portions=10)
    >>> qty
    10
    """
    if not getattr(resto, "inventory", None):
        # CrÃ©e un inventaire minimal si absent
        resto.inventory = Inventory()
    # Choisit systÃ©matiquement le premier plat du menu (simple mais prÃ©visible)
    recipe0 = resto.menu[0]
    price0 = float(
        getattr(recipe0, "price", getattr(recipe0, "selling_price", 0.0)) or 10.0
    )
    resto.inventory.add_finished_lot(
        recipe_name=recipe0.name,
        selling_price=price0,
        portions=int(portions),
        produced_tour=1,
        shelf_tours=1,  # pÃ©rime fin T2
    )
    return recipe0, price0, portions


# Staff de base si helpers RH existent
def add_basic_staff(resto):
    """Ajoute un noyau de staff si des helpers RH sont disponibles.

    La mÃ©thode est opportuniste: elle n'Ã©choue pas si les helpers n'existent pas
    encore sur `Restaurant`. Elle sert Ã  accÃ©lÃ©rer les tests de bout en bout.

    Retour
    - list: Ã©lÃ©ments Ã©ventuellement crÃ©Ã©s/retournÃ©s par les helpers, sinon vide.
    """
    # On essaie d'utiliser les helpers prÃ©sents dans Restaurant (si existants)
    added = []
    try:
        # Si des mÃ©thodes comme add_staff(role, count, minutes) existent, adapter ici
        if hasattr(resto, "add_server"):
            added.append(resto.add_server("Serveur 1", minutes_service=2400))
        if hasattr(resto, "add_cook"):
            added.append(resto.add_cook("Cuisinier 1", minutes_prod=2400))
    except Exception:
        pass
    # sinon, on laisse la boucle Game gÃ©rer sans RH dÃ©taillÃ©e
    return added


def main() -> None:
    """Point d'entrÃ©e du script de dÃ©monstration.

    Ã‰tapes principales mises en Å“uvre:
    1. SÃ©curiser (no-op) la compta si besoin
    2. CrÃ©er un restaurant de type Bistro
    3. GÃ©nÃ©rer un menu (ou fallback mini menu)
    4. Amorcer l'inventaire avec un lot de produits finis
    5. Ajouter un staff minimal si possible
    6. Lancer la partie sur 2 tours
    """
    # 1) CrÃ©e un resto (change ici le type si tu veux tester)
    rtype = RestaurantType.BISTRO
    local = CATALOG_LOCALS["BISTRO"][0]
    resto = Restaurant(
        name="DÃ©mo Bistro",
        type=rtype,
        local=local,
        funds=10_000.0,
        marketing_budget=200.0,
        overheads={"loyer": 2200.0, "autres": 300.0},
        notoriety=0.5,
    )

    # 2) GÃ©nÃ¨re le menu (15 bistro / 10 FF / 20 gastro ou fallback mini)
    resto.menu = build_menu_for_type(rtype)

    # 3) Ajoute un lot de produits finis pour vendre direct
    recipe0, price0, portions = prime_finished_stock(resto, portions=50)
    print(f"âœ” Lot prÃªt : {portions}x Â« {recipe0.name} Â» Ã  {price0:.2f} â‚¬")

    # 4) (optionnel) Staff de base
    add_basic_staff(resto)

    # 5) Lance la partie sur 2 tours (fallback scÃ©nario local)
    game = Game(
        restaurants=[resto],
        scenario=CATALOG_SCENARIOS["centre_ville"],
    )
    print("\nðŸš€ Lancement Game.play() sur 2 toursâ€¦")
    game.play()
    print("\nâœ… Fin de dÃ©mo.")


if __name__ == "__main__":
    main()
