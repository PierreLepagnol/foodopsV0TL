from typing import List, Dict
from ..domain.recipe import Recipe, RecipeLine, PrepStep
from ..domain.ingredient import Ingredient
from ..data.ingredients_fr import INGREDIENTS_FR
from ..rules import costing
from ..domain.restaurant import RestaurantType


def pick_policy_for_restotype(rt: RestaurantType) -> costing.PricePolicy:
    if rt == RestaurantType.FAST_FOOD:
        return costing.FAST_POLICY
    if rt == RestaurantType.GASTRO:
        return costing.GASTRO_POLICY
    return costing.BISTRO_POLICY


def choose_ingredients() -> List[Ingredient]:
    """S√©lection multi simple depuis le catalogue FR."""
    names = list(INGREDIENTS_FR.keys())
    print("\nCatalogue ingr√©dients (FR) üçÖü•ï :")
    for i, n in enumerate(names, 1):
        ing = INGREDIENTS_FR[n]
        print(f" {i:>2}. {n} ‚Äî {ing.base_price_eur_per_kg:.2f} ‚Ç¨/kg, grade={ing.grade.name}")
    print("Tapez les num√©ros s√©par√©s par des virgules (ex: 1,3,5) ou Enter pour annuler. üìù")
    raw = input("> ").strip()
    if not raw:
        return []
    idxs = []
    for part in raw.split(","):
        try:
            j = int(part.strip())
            if 1 <= j <= len(names):
                idxs.append(j - 1)
        except ValueError:
            pass
    return [INGREDIENTS_FR[names[j]] for j in idxs]


def build_recipe(rt: RestaurantType) -> Recipe | None:
    print("\n=== Cr√©ation d'une recette === üçΩÔ∏è")
    name = input("Nom de la recette : ").strip()
    if not name:
        print("‚ùå Annul√©.")
        return None

    ings = choose_ingredients()
    if not ings:
        print("‚ùå Aucun ingr√©dient s√©lectionn√©. Annul√©.")
        return None

    lines: List[RecipeLine] = []
    for ing in ings:
        while True:
            try:
                qty = float(input(f"Quantit√© de {ing.name} (en grammes, ex 120) : "))
                if qty <= 0: raise ValueError
                break
            except ValueError:
                print("‚ö†Ô∏è Veuillez entrer un nombre positif.")
        # √âtapes de prep (V1 raccourci)
        prep = []
        ans = input("Parage/cuisson ? (o/N) : ").strip().lower()
        if ans == "o":
            while True:
                try:
                    lr = float(input("  Perte (%) ex 10 pour -10% (Enter pour terminer) : ") or "NaN")
                    if lr != lr:  # NaN -> break
                        break
                    prep.append(PrepStep(name="loss", loss_ratio=lr/100.0))
                except ValueError:
                    break
        lines.append(RecipeLine(ingredient=ing, qty_g=qty, prep=prep))

    while True:
        try:
            portions = int(input("Nombre de portions (rendement) : "))
            if portions <= 0: raise ValueError
            break
        except ValueError:
            print("‚ö†Ô∏è Nombre invalide.")

    r = Recipe(name=name, lines=lines, yield_portions=portions)

    # Calculs
    cost = r.cost_per_portion()
    q = r.estimate_quality()
    policy = pick_policy_for_restotype(rt)
    suggested = r.suggest_price(policy)

    print("\n--- Fiche co√ªt express --- üí∂ ---")
    print(f"Recette : {r.name} üçΩÔ∏è")
    print(f"Co√ªt mati√®res / portion : {cost:.2f} ‚Ç¨")
    print(f"Qualit√© estim√©e (0..1) : {q:.2f} ‚≠ê")
    print(f"Prix conseill√© ({policy.name}) : {suggested:.2f} ‚Ç¨ üí°")
    ans = input("Fixer un prix de vente maintenant ? (Enter = conseill√© / valeur = prix ‚Ç¨) : ").strip()
    if ans:
        try:
            r.selling_price = max(0.0, float(ans))
        except ValueError:
            r.selling_price = suggested
    else:
        r.selling_price = suggested

    # base_quality utilis√© par le moteur actuel (scoring d√©j√† en place)
    r.base_quality = q
    print(f"Prix de vente retenu : {r.selling_price:.2f} ‚Ç¨ ‚úÖ")
    return r


def edit_menu_interactive(resto_type: RestaurantType) -> List[Recipe]:
    print("\n=== √âditeur de recettes ‚Äî Construction du menu === üßë‚Äçüç≥")
    menu: List[Recipe] = []
    while True:
        r = build_recipe(resto_type)
        if r:
            menu.append(r)
        more = input("Ajouter une autre recette ? (o/N) : ").strip().lower()
        if more != "o":
            break
    if not menu:
        print("Menu vide ‚Äî pensez √† utiliser les menus par d√©faut si besoin. ‚ö†Ô∏è")
    return menu
